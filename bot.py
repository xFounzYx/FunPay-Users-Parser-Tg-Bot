import os
import logging
import sqlite3
import asyncio
from telegram import Update
from telegram.error import TimedOut
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters


logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = ""

SEARCH_MODE = "match"

# ID –∞–¥–º–∏–Ω–∞ –≤ Telegram
ADMIN_ID = 

# –ò–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_FILE = "authorized_keys.db"


def init_db():
    with sqlite3.connect(DATABASE_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS authorized_keys (
                key TEXT PRIMARY KEY,
                user_id INTEGER
            )
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS banned_users (
                user_id INTEGER PRIMARY KEY
            )
        """)
        conn.commit()


        cursor.execute("INSERT OR IGNORE INTO authorized_keys (key, user_id) VALUES (?, ?)", ("admin", ADMIN_ID))
        conn.commit()


def add_key_to_db(key: str, user_id: int = None):
    with sqlite3.connect(DATABASE_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO authorized_keys (key, user_id) VALUES (?, ?)", (key, user_id))
        conn.commit()


def delete_key_from_db(key: str):
    with sqlite3.connect(DATABASE_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM authorized_keys WHERE key = ?", (key,))
        conn.commit()
        return cursor.rowcount > 0


def ban_user(user_id: int):
    with sqlite3.connect(DATABASE_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO banned_users (user_id) VALUES (?)", (user_id,))
        conn.commit()


def unban_user(user_id: int):
    with sqlite3.connect(DATABASE_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM banned_users WHERE user_id = ?", (user_id,))
        conn.commit()
        return cursor.rowcount > 0


def is_user_banned(user_id: int) -> bool:
    with sqlite3.connect(DATABASE_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM banned_users WHERE user_id = ?", (user_id,))
        return cursor.fetchone() is not None


def is_key_activated(key: str) -> bool:
    with sqlite3.connect(DATABASE_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM authorized_keys WHERE key = ?", (key,))
        result = cursor.fetchone()
        return result is not None and result[0] is not None


def activate_key(key: str, user_id: int):
    if is_user_banned(user_id):
        return False
    with sqlite3.connect(DATABASE_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE authorized_keys SET user_id = ? WHERE key = ? AND user_id IS NULL", (user_id, key))
        conn.commit()
        return cursor.rowcount > 0


def is_authorized(user_id: int) -> bool:
    if user_id == ADMIN_ID:
        return True
    with sqlite3.connect(DATABASE_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT key FROM authorized_keys WHERE user_id = ?", (user_id,))
        return cursor.fetchone() is not None


def load_keys_from_db():
    with sqlite3.connect(DATABASE_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT key, user_id FROM authorized_keys")
        return {row[0]: row[1] for row in cursor.fetchall()}


init_db()


async def send_file_with_retry(update: Update, context: ContextTypes.DEFAULT_TYPE, file_path: str, caption: str = "", retries=3):
    for attempt in range(retries):
        try:
            if os.path.exists(file_path):
                with open(file_path, "rb") as file:
                    await update.message.reply_document(document=file, caption=caption)
                logger.info(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                break
            else:
                await update.message.reply_text(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                break
        except TimedOut as e:
            if attempt < retries - 1:
                logger.warning(f"–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_path}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {retries}.")
                await asyncio.sleep(2)  
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {file_path} –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫.")
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∏–∑-–∑–∞ —Ç–∞–π–º-–∞—É—Ç–∞")


async def check_ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã")
        return True  
    return False  


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_ban(update, context):
        return

    user_id = update.message.from_user.id
    if user_id == ADMIN_ID:
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    elif is_authorized(user_id):
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
    else:
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ \nüí∞ –ö—É–ø–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ —É @founzy")


async def handle_key_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_ban(update, context):
        return

    user_id = update.message.from_user.id
    if user_id == ADMIN_ID:
        await update.message.reply_text("üîë –ê–¥–º–∏–Ω –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∫–ª—é—á–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return

    key = update.message.text.strip()

    if is_key_activated(key):
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –∫–ª—é—á —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return

    if activate_key(key, user_id):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.username} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–ª—é—á: {key}")
        await update.message.reply_text("‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞")
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.username} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á: {key}")
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á")


async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_ban(update, context):
        return

    user_id = update.message.from_user.id
    if not is_authorized(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª users_funpay.txt")
    file_path = "users_funpay.txt"
    if os.path.exists(file_path):
        file_size = os.path.getsize(file_path)
        if file_size > 50 * 1024 * 1024:  
            await update.message.reply_text("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –†–∞–∑–¥–µ–ª—è—é –Ω–∞ —á–∞—Å—Ç–∏...")
            part_files = split_file(file_path)
            for part_file in part_files:
                await send_file_with_retry(update, context, part_file, f"–§–∞–π–ª users_funpay.txt, —á–∞—Å—Ç—å {part_files.index(part_file) + 1}/{len(part_files)}")
                os.remove(part_file) 
        else:
            await send_file_with_retry(update, context, file_path, "–§–∞–π–ª users_funpay.txt")
    else:
        await update.message.reply_text("–§–∞–π–ª users_funpay.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def errors_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_ban(update, context):
        return

    user_id = update.message.from_user.id
    if not is_authorized(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª errors_funpay.txt")
    await send_file_with_retry(update, context, "errors_funpay.txt", "–§–∞–π–ª errors_funpay.txt")


def get_user_text(count: int) -> str:
    last_digit = count % 10
    last_two_digits = count % 100

    if last_digit == 1 and last_two_digits != 11:
        return f"–ù–∞–π–¥–µ–Ω {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    elif 2 <= last_digit <= 4 and not (12 <= last_two_digits <= 14):
        return f"–ù–∞–π–¥–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    else:
        return f"–ù–∞–π–¥–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"


async def find_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_ban(update, context):
        return

    user_id = update.message.from_user.id
    if not is_authorized(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.username} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫.")
    try:

        args = context.args
        if len(args) < 1:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /find <–Ω–∏–∫>")
            return

        nickname = " ".join(args)

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.username} –∏—â–µ—Ç –Ω–∏–∫: {nickname} (—Ä–µ–∂–∏–º: {SEARCH_MODE})")
        await update.message.reply_text(f"üîé –ù–∞—á–∞–ª –ø–æ–∏—Å–∫ '{nickname}'")
        

        if os.path.exists("users_funpay.txt"):
            with open("users_funpay.txt", "r", encoding="utf-8") as file:
                lines = file.readlines()
                found_lines = []

                for line in lines:
                    if " - " in line:
                        url, username = line.strip().split(" - ", 1)
                        if SEARCH_MODE == "strict" and username.lower() == nickname.lower():
                            found_lines.append(f"{username} - {url}\n")
                        elif SEARCH_MODE == "match" and nickname.lower() in username.lower():
                            found_lines.append(f"{username} - {url}\n")

            if found_lines:

                response = "\n".join(found_lines)


                user_count = len(found_lines)
                user_text = get_user_text(user_count)

                await update.message.reply_text(user_text)


                if len(response) > 4096:
                    await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º...")
                    with open("found_users.txt", "w", encoding="utf-8") as f:
                        f.write(response)
                    await send_file_with_retry(update, context, "found_users.txt")
                    os.remove("found_users.txt")
                else:
                    await update.message.reply_text(response)
            else:
                await update.message.reply_text(f"–ù–∏–∫ '{nickname}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await update.message.reply_text("–§–∞–π–ª users_funpay.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except IndexError:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /find <–Ω–∏–∫>")


async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_ban(update, context):
        return

    user_id = update.message.from_user.id
    if not is_authorized(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    if os.path.exists("users_funpay.txt"):
        await update.message.reply_text(f"üëÄ –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        with open("users_funpay.txt", "r", encoding="utf-8") as file:
            lines = file.readlines()
            count = len(lines)
            await update.message.reply_text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {count}")
    else:
        await update.message.reply_text("–§–∞–π–ª users_funpay.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def set_mode_strict_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_ban(update, context):
        return

    user_id = update.message.from_user.id
    if not is_authorized(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    global SEARCH_MODE
    SEARCH_MODE = "strict"
    await update.message.reply_text("–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'strict' (—Å—Ç—Ä–æ–≥–∏–π)")


async def set_mode_match_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_ban(update, context):
        return

    user_id = update.message.from_user.id
    if not is_authorized(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    global SEARCH_MODE
    SEARCH_MODE = "match"
    await update.message.reply_text("–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'match' (–ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é)")


async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_ban(update, context):
        return

    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:  
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π")
        return

    args = context.args
    if len(args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /add <–∫–ª—é—á>")
        return

    key = args[0]
    add_key_to_db(key)
    await update.message.reply_text(f"‚úÖ –ö–ª—é—á {key} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")


async def delete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_ban(update, context):
        return

    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:  
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π")
        return

    args = context.args
    if len(args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /delete <–∫–ª—é—á>")
        return

    key = args[0]
    if delete_key_from_db(key):
        await update.message.reply_text(f"‚úÖ –ö–ª—é—á {key} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    else:
        await update.message.reply_text(f"‚ùå –ö–ª—é—á {key} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_ban(update, context):
        return

    user_id = update.message.from_user.id
    if user_id != ADMIN_ID: 
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    args = context.args
    if len(args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /ban <user_id –∏–ª–∏ @username>")
        return

    target = args[0].strip()

    try:
        if target.startswith("@"):
            username = target

            try:
                user = await context.bot.get_chat(username)
                banned_user_id = user.id
            except Exception as e:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        else:

            banned_user_id = int(target)


        ban_user(banned_user_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} (ID: {banned_user_id}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username)")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_ban(update, context):
        return

    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    args = context.args
    if len(args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /unban <user_id –∏–ª–∏ @username>")
        return

    target = args[0].strip()

    try:
        if target.startswith("@"):
            username = target
            try:
                user = await context.bot.get_chat(username)
                unbanned_user_id = user.id
            except Exception as e:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        else:
            unbanned_user_id = int(target)


        if unban_user(unbanned_user_id):
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} (ID: {unbanned_user_id}) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} (ID: {unbanned_user_id}) –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username)")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def keys_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_ban(update, context):
        return

    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª—é—á–µ–π")
        return

    with sqlite3.connect(DATABASE_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT key, user_id FROM authorized_keys")
        keys = cursor.fetchall()

        if not keys:
            await update.message.reply_text("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–ª—é—á–µ–π")
            return

        response = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        for key, user_id in keys:
            if user_id is not None:
                try:
                    user = await context.bot.get_chat(user_id)
                    username = f"@{user.username}" if user.username else "–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
                    response += f"{key} - {username} (ID: {user_id})\n\n"
                except Exception as e:
                    response += f"{key} - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {user_id})\n\n"
            else:
                response += f"{key} - –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n"

        await update.message.reply_text(response)


def split_file(file_path, chunk_size=20 * 1024 * 1024):  # 20 –ú–ë
    part_files = []
    part_num = 1
    current_size = 0
    current_lines = []

    with open(file_path, "r", encoding="utf-8") as file:
        for line in file:
            line_size = len(line.encode("utf-8"))
            if current_size + line_size > chunk_size and current_lines:
                part_file_path = f"{file_path}.part{part_num}"
                with open(part_file_path, "w", encoding="utf-8") as part_file:
                    part_file.writelines(current_lines)
                part_files.append(part_file_path)
                part_num += 1
                current_lines = []
                current_size = 0

            current_lines.append(line)
            current_size += line_size

        if current_lines:
            part_file_path = f"{file_path}.part{part_num}"
            with open(part_file_path, "w", encoding="utf-8") as part_file:
                part_file.writelines(current_lines)
            part_files.append(part_file_path)

    return part_files


def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = ApplicationBuilder().token(TOKEN).read_timeout(30).write_timeout(30).build()


    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("users", users_command))
    application.add_handler(CommandHandler("errors", errors_command))
    application.add_handler(CommandHandler("find", find_command))
    application.add_handler(CommandHandler("check", check_command))
    application.add_handler(CommandHandler("set_mode_strict", set_mode_strict_command))
    application.add_handler(CommandHandler("set_mode_match", set_mode_match_command))
    application.add_handler(CommandHandler("add", add_command))
    application.add_handler(CommandHandler("delete", delete_command))
    application.add_handler(CommandHandler("ban", ban_command))
    application.add_handler(CommandHandler("unban", unban_command))
    application.add_handler(CommandHandler("keys", keys_command))


    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_key_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥...")
    application.run_polling()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n[‚ùå] –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
